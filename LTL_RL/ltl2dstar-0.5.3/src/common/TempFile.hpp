/*
 * This file is part of the program ltl2dstar (http://www.ltl2dstar.de/).
 * Copyright (C) 2005-2015 Joachim Klein <j.klein@ltl2dstar.de>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as 
 *  published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */



#ifndef TEMPFILE
#define TEMPFILE

/** @file
 * Provide temporary file objects.
 */

#if (__WIN32__ || _WIN32)
 #include <windows.h>
 #include <io.h>
#endif

#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>

#include <cstdio>
#include <cerrno>
#include <string>
#include <iostream>
#include "common/fdstream.hpp"
#include "common/Exceptions.hpp"

/**
 * Virtual base class for a temporary file.
 */
class TempFile {
public:
  /** Constructor */
  TempFile() : istr(0), ostr(0) {}

  /** Destructor */
  virtual ~TempFile() {delete istr;delete ostr;}

  /** Get a file descriptor for the file */
  virtual int getFileDescriptor() = 0;

  /** Seek to start of file */
  void reset() {
    lseek(getFileDescriptor(), 0, SEEK_SET);
  }

  /** Get an istream for this file */
  std::istream& getIStream() {
    if (istr!=0) {return *istr;}

    lseek(getFileDescriptor(), 0, SEEK_SET);
    istr=new boost::fdistream(getFileDescriptor());
    return *istr;
  }

  /** Get an ostream for this file */
  std::ostream& getOStream() {
    if (ostr!=0) {return *ostr;}

    lseek(getFileDescriptor(), 0, SEEK_SET);
    ostr=new boost::fdostream(getFileDescriptor());
    return *ostr;
  }

  /** Get a FILE* for reading from this file */
  virtual FILE *getInFILEStream() {
    // dup file descriptor so that the FILE* can be
    // closed independantly of the file descriptor
    int dup_fd=dup(getFileDescriptor());
    if (dup_fd<0) {throw Exception("Couldn't dup file descriptor! errno="
				   +boost::lexical_cast<std::string>(errno));}

    FILE *file=fdopen(dup_fd, "r");
    fseek(file, 0, SEEK_SET);

    return file;
  }

  /** Get a FILE* for writing to this file */
  virtual FILE *getOutFILEStream() {
    // dup file descriptor so that the FILE* can be
    // closed independantly of the file descriptor
    int dup_fd=dup(getFileDescriptor());
    if (dup_fd<0) {throw Exception("Couldn't dup file descriptor! errno="
				   +boost::lexical_cast<std::string>(errno));}

    FILE *file=fdopen(dup_fd, "a");
    fseek(file, 0, SEEK_SET);
    return file;
  }



#if (__WIN32__ || _WIN32)
  /** Get the win32 file handle for this file */
  HANDLE getFileHandle() {
    return (HANDLE)_get_osfhandle(getFileDescriptor());
  }
#endif

private:
  std::istream* istr;
  std::ostream* ostr;
};

/**
 * A class for an anonymous temporary file. Because this file
 * is anonymous, it can not be used for
 * sym-link attacks on the user, but it can also not be passed
 * by name to another process.
 */
class AnonymousTempFile : public TempFile {
public:
  /** Constructor */
  AnonymousTempFile() {
    _file=tmpfile();
    if (!_file) {
      THROW_EXCEPTION(Exception, "Could not open anonymous tmpfile!");
    }
  }

  /** Destructor */
  virtual ~AnonymousTempFile() {fclose(_file);}

  /** Get a file descriptor */
  virtual int getFileDescriptor() {
    #if (__WIN32__ || _WIN32)
    return _fileno(_file);
    #else
    return fileno(_file);
    #endif
  }

private:
  FILE *_file;
};



/**
 * A named temporary file.
 *
 * Warning: Named temporary files are not secure as 
 *  the generation of the name and the use of the
 *  file are not necessarily done in one atomic step.
 */
class NamedTempFile : public TempFile {
public:
  /**
   * Constructor. The filename is generated by the function tmpnam.
   * @param deleteInDestructor delete the file when this object is destructed? 
   */
  NamedTempFile(bool deleteInDestructor=true) : 
    _filename(""), 
    _delete_after_use(deleteInDestructor),
    fd(-1) {

#if (__WIN32__ || _WIN32)
    char *tmpfile=_tempnam(NULL, "ltl");
    //    std::cerr << tmpfile << std::endl;
    if (!tmpfile) {
      THROW_EXCEPTION(Exception, "Can't generate unique temporary filename!");
    }
    _filename=std::string(tmpfile);
    free(tmpfile);

    open();
#else // posix
    char tmpfile[15] ="l2d-tmp-XXXXXX";
    fd = mkstemp(tmpfile);

    _filename=std::string(tmpfile);

    if (fd < 0) {
      handle_open_error();
    }
#endif
  }

  /**
   * Constructor
   * @param filename the name of the file
   * @param deleteInDestructor delete the file when this object is destructed? 
   */
  NamedTempFile(std::string filename, 
		bool deleteInDestructor=true) :
    _filename(filename),
    _delete_after_use(deleteInDestructor),
    fd(-1) {
    open();
  }
  
  /** Destructor */
  virtual ~NamedTempFile() {
    if (fd>=0) {
      close();
      
      if (_delete_after_use && _filename != "") {
#if (__WIN32__ || _WIN32)      
	_unlink(_filename.c_str());
#else // POSIX
	// TODO: Should check that file is a standard file (no symlink)
	unlink(_filename.c_str());
#endif
      }
    }
  }

  /**
   * Get the file descriptor 
   */
  virtual int getFileDescriptor() {
    return fd;
  }

  /** Get the filename */
  const std::string& getFileName() const {
    return _filename;
  }

private:
  // hide copy constructor
  explicit NamedTempFile(const NamedTempFile& other);

  std::string _filename;
  bool _delete_after_use;
  int fd;

  /** Open the file */
  void open() {
#if (__WIN32__ || _WIN32) 
    fd=_open(_filename.c_str(),
	     _O_CREAT | _O_EXCL | _O_RDWR);
#else // POSIX
    fd=::open(_filename.c_str(),
	      O_CREAT | O_EXCL | O_RDWR,
	      S_IRUSR | S_IWUSR); // 0600 as mode
#endif

    if (fd < 0) {
      handle_open_error();
    }
  }

  void handle_open_error() {
    std::string filename(_filename);
    _filename = "";   // prevent unlink on destructor
    switch (errno) {
    case EEXIST:
      THROW_EXCEPTION(Exception, "Trying to open already existing temporary file "+filename);
    case EACCES:
      THROW_EXCEPTION(Exception, "No access to temporary file "+filename);
    default:
      THROW_EXCEPTION(Exception, "Error trying to open temporary file "+filename+": "+strerror(errno));
    }
  }

  /** Close the file */
  void close() {
    if (fd>=0) {
#if (__WIN32__ || _WIN32)
      _close(fd);
#else  // POSIX
      ::close(fd);
#endif
    }
  }
};

#endif
